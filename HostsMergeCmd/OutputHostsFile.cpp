#include "stdafx.h"

#include "OutputHostsFile.h"

namespace
{
    void OutputLocalNetwork(
        __in IPAddressMap const & f_cache,
        __in std::ostream & f_outf )
    {
        size_t nItems( 0 );
        IPAddressMap::const_iterator const itEnd( f_cache.end() );

        for( IPAddressMap::const_iterator itEntry( f_cache.begin() );
            itEnd != itEntry;
            ++itEntry )
        {
            if( IsBlockedIp( itEntry->first ) )
            {
                continue;
            }

        
            // output an IP one per line
            f_outf << UnpackedIP( itEntry->first ) << "\t" << itEntry->second << std::endl;

            ++nItems;
        }

        std::cout << " -> Written " << nItems << " local network\\non blocking items." << std::endl;
    }

    void OutputBlockList(
        __in IPAddressMap const & f_cache,
        __in std::ostream & f_outf )
    {
        DomainNames const setDomainNames( ExtractUniqueDomainNames( f_cache ) );

        std::string const sBlockedIP( UnpackedIP( BlockedIP() ) );

        size_t const knMaxItemsPerLine( 1 );

        DomainNames::const_iterator const itEnd( setDomainNames.end() );

        char const kszDelimiter[] = "\t";

        std::string sOptimizedEntries;

        size_t nEntry( 0 );
        for( DomainNames::const_iterator itEntry( setDomainNames.begin() );
            itEnd != itEntry;
            ++itEntry )
        {
            if( !sOptimizedEntries.empty() )
            {
                sOptimizedEntries += kszDelimiter;
            }

            sOptimizedEntries += *itEntry;

            ++nEntry;
            if( 0 == ( nEntry % knMaxItemsPerLine ) )
            {
                // output entries
                f_outf << sBlockedIP << "\t" << sOptimizedEntries << std::endl;

                sOptimizedEntries = "";
            }
        }

        if( !sOptimizedEntries.empty() )
        {
            // output entries
            f_outf << sBlockedIP << "\t" << sOptimizedEntries << std::endl;
        }


        std::cout << " -> Written " << setDomainNames.size() << " block entries." << std::endl;
    }
}


void SaveCache(
               __in IPAddressMap const & f_cache,
               __in_z char const * const f_szFileName )
{
    std::cout << "Saving cache to " << f_szFileName << "..." << std::endl;

    std::ofstream foutf( f_szFileName);
    if( foutf.bad() )
    {
        // some error, abort
        return;
    }

    foutf << "# Copyright (c) 1993-1999 Microsoft Corp." << std::endl
          << std::endl
          << "# This is a sample HOSTS file used by Microsoft TCP/IP for Windows." << std::endl
          << std::endl
          << "# This file contains the mappings of IP addresses to host names. Each" << std::endl
          << "# entry should be kept on an individual line. The IP address should" << std::endl
          << "# be placed in the first column followed by the corresponding host name." << std::endl
          << "# The IP address and the host name should be separated by at least one" << std::endl
          << "# space." << std::endl
          << "#" << std::endl
          << "#" << std::endl
          << "# This file was generated by HostsMergeCmd." << std::endl
          << "#" << std::endl
          << "#" << std::endl
          << "# Additionally, comments (such as these) may be inserted on individual" << std::endl
          << "# lines or following the machine name denoted by a '#' symbol." << std::endl
          << std::endl
          << "# For example:" << std::endl
          << "#" << std::endl
          << "#      102.54.94.97     rhino.acme.com          # source server" << std::endl
          << "#       38.25.63.10     x.acme.com              # x client host" << std::endl
          << std::endl
          << "127.0.0.1\tlocalhost" << std::endl
          << std::endl;

    foutf << "# BEGIN Local network\\Specific hosts" << std::endl;

    OutputLocalNetwork( f_cache, foutf );

    foutf << "# END Local network\\Specific hosts" << std::endl
          << std::endl
          << std::endl;

    foutf << "# BEGIN Block List" << std::endl;

    OutputBlockList( f_cache, foutf );

    foutf << "# END Block List" << std::endl
          << std::endl;
}

